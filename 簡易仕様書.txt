• アプリ名
	予想利益シミュレーション

• 対象 OS およびブラウザ(ver.含む)
	Google Chrome、Microsoft Edge、etc..

• 開発環境/言語
	Windows(jupyterLab)/Python 

• 機能概要(機能一覧)
	スライダーバー、推移グラフ、利益や売上を予想する、最適な広告投下費用なども計算することができる。

• フレームワーク(ver.含む)
	Streamlit

• テーブル定義(ER 図)などの設計ドキュメント
	①広告宣伝費
		Web広告を中心とした変動費（1000～9000万円でシミュレーション）

	②その他固定費
		広告宣伝費以外にかかる固定費（1000万円で固定）

	③費用
		①ー②

	④予想売上
		28700000＊ln(x)-444000000（参考書の計算式一部引用）
			ｘ：広告宣伝費

	⑤予想利益
		④ー③


	サイドバーに広告宣伝費のスライダーを作成する。
	スライダーの値を用いてリアルタイムで予想売上や予想利益を計算する。
	あらかじめ広告宣伝費と売上＆利益の関係をグラフで表示する。

• コンセプト
	リアルタイムで売り上げや利益を予想することができることをコンセプトにしたプレゼン資料

• こだわったポイント
	１，100000などの大きい数は1.0E+5と書くことで見やすくしている
		例えば、2000万円を考えたとき2000*1.0E+4と書きます。
			↑2千（2000）と1万（1.0E+4）をかけています。
	
	２,入力フォームをスライダーにすることで臨機応変に対応できる。

	３，一瞬で予想利益をシミュレーションできるようにしている。

	４，for文の書き方をコンパクトにしている。例えば、
		b = []
		for _a in a:
			b.append(_a*10)

		↓

		b = [_a*10 for _a in a]	

• デザイン面でこだわったポイント
	必要な情報を見やすいように配置しました。費用の下に最適な広告投下費用を記載したり、
	予想利益の下に利益率を表示するなど見やすいように工夫しました。

• 自己評価
	このWebアプリはPythonのみでバックエンドとフロントエンドを作成しているので、
	シンプルなアプリになりました。会社でのプレゼンなどにも使えるように余計なものは使わず、
	見やすい資料になっていると思います。

	・改善点
	他のプログラミング言語と組み合わせる技術を磨くべきだと思いました。
	CSSやJavaScriptを用いることでより細かくこだわることができたのではないかということに気づくことができました。







